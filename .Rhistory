steps_model <- "model{
# Likelihood model for X[i]
for(i in 1:length(X)) {
X[i] ~ dpois(theta[student[i]])
}
# Prior models for theta_s
for(student in 1:n.student) {
theta[student] ~ dgamma(7, 0.001)
}
# Hyperpriors for a,b
# a ~ dgamma(10000, 4500)
# b ~ dgamma(7500, 3000)
}"
steps_jags <- jags.model(textConnection(steps_model),
data = list(X = steps_df$steps, student = steps_df$students,
n.student = 4),
n.chains = 4)
# BURN IN the model
steps_sim <- update(steps_jags, n.iter=10000)
# SIMULATE the posterior
steps_sim <- coda.samples(model = steps_jags,
variable.names = c("theta","a","b"),
n.iter=20000)
# BURN IN the model
steps_sim <- update(steps_jags, n.iter=10000)
# SIMULATE the posterior
steps_sim <- coda.samples(model = steps_jags,
variable.names = c("theta"),
n.iter=20000)
# plot the simulations
plot(steps_sim[,c(1,2)])
plot(steps_sim[,c(3,4,5,6)])
# plot the simulations
plot(steps_sim)
# summary of quantiles
round(summary(steps_sim)[2]$quantile)
steps_model <- "model{
# Likelihood model for X[i]
for(i in 1:length(X)) {
X[i] ~ dpois(theta[student[i]])
}
# Prior models for theta_s
for(student in 1:n.student) {
theta[student] ~ dgamma(a, b)
}
# Hyperpriors for a,b
a ~ dunif(5, 9)
b ~ dunif(0.0005, 0.0015)
}"
steps_jags <- jags.model(textConnection(steps_model),
data = list(X = steps_df$steps, student = steps_df$students,
n.student = 4),
n.chains = 4)
# BURN IN the model
steps_sim <- update(steps_jags, n.iter=10000)
# SIMULATE the posterior
steps_sim <- coda.samples(model = steps_jags,
variable.names = c("theta"),
n.iter=20000)
# plot the simulations
plot(steps_sim)
# BURN IN the model
steps_sim <- update(steps_jags, n.iter=10000)
# SIMULATE the posterior
steps_sim <- coda.samples(model = steps_jags,
variable.names = c("theta", "a", "b"),
n.iter=20000)
# plot the simulations
plot(steps_sim)
steps_model <- "model{
# Likelihood model for X[i]
for(i in 1:length(X)) {
X[i] ~ dpois(theta[student[i]])
}
# Prior models for theta_s
for(student in 1:n.student) {
theta[student] ~ dgamma(a, b)
}
# Hyperpriors for a,b
a ~ dunif(5, 8)
b ~ dunif(0.0005, 0.001)
}"
steps_jags <- jags.model(textConnection(steps_model),
data = list(X = steps_df$steps, student = steps_df$students,
n.student = 4),
n.chains = 4)
# BURN IN the model
steps_sim <- update(steps_jags, n.iter=10000)
# SIMULATE the posterior
steps_sim <- coda.samples(model = steps_jags,
variable.names = c("theta", "a", "b"),
n.iter=20000)
# plot the simulations
plot(steps_sim)
# summary of quantiles
round(summary(steps_sim)[2]$quantile)
mle <- steps_df %>% group_by(students) %>% summarise(mle = mean(steps))
kable(data.frame(round(mle,2), posterior = round(summary(steps_sim)[[1]][3:6])))
steps_model <- "model{
# Likelihood model for X[i]
for(i in 1:length(X)) {
X[i] ~ dpois(theta[student[i]])
}
# Prior models for theta_s
for(student in 1:n.student) {
theta[student] ~ dgamma(a, b)
}
# Hyperpriors for a,b
a ~ dnorm(7, 1^(-2))
b ~ dnorm(0.001, 0.01^(-2))
}"
steps_jags <- jags.model(textConnection(steps_model),
data = list(X = steps_df$steps, student = steps_df$students,
n.student = 4),
n.chains = 4)
# BURN IN the model
steps_sim <- update(steps_jags, n.iter=10000)
# SIMULATE the posterior
steps_sim <- coda.samples(model = steps_jags,
variable.names = c("theta", "a", "b"),
n.iter=20000)
# plot the simulations
plot(steps_sim)
# summary of quantiles
round(summary(steps_sim)[2]$quantile)
# summary of quantiles
round(summary(steps_sim)[2]$quantile, 4)
# summary of quantiles
round(summary(steps_sim)[2]$quantile, 4)
mle <- steps_df %>% group_by(students) %>% summarise(mle = mean(steps))
kable(data.frame(round(mle,2), posterior = round(summary(steps_sim)[[1]][3:6])))
mle <- steps_df %>% group_by(students) %>% summarise(mle = mean(steps))
kable(data.frame(round(mle,2), posterior = round(summary(steps_sim)[[1]][3:6])))
View(steps_sim)
# summary of quantiles
round(summary(steps_sim)[[2]]$quantile, 4)
# summary of quantiles
round(summary(steps_sim)[2]$quantile, 4)
post_mean <- 5.4211/0.0004
post_mean
summary(steps_sim)[2]$statistics
#mle <- steps_df %>% group_by(students) %>% summarise(mle = mean(steps))
#kable(data.frame(round(mle,2), posterior = round(summary(steps_sim)[[1]][3:6])))
summary(steps_sim)[1]$statistics
#mle <- steps_df %>% group_by(students) %>% summarise(mle = mean(steps))
#kable(data.frame(round(mle,2), posterior = round(summary(steps_sim)[[1]][3:6])))
round(summary(steps_sim)[1]$statistics, 4)
#mle <- steps_df %>% group_by(students) %>% summarise(mle = mean(steps))
#kable(data.frame(round(mle,2), posterior = round(summary(steps_sim)[[1]][3:6])))
round(summary(steps_sim)[1]$statistics, 4)
post_mean <- 7.3165/0.0007
post_mean
#mle <- steps_df %>% group_by(students) %>% summarise(mle = mean(steps))
#kable(data.frame(round(mle,2), posterior = round(summary(steps_sim)[[1]][3:6])))
stat <- round(summary(steps_sim)[1]$statistics, 4)
post_mean <- 7.3165/0.0007
#mle <- steps_df %>% group_by(students) %>% summarise(mle = mean(steps))
#kable(data.frame(round(mle,2), posterior = round(summary(steps_sim)[[1]][3:6])))
stat <- round(summary(steps_sim)[1]$statistics, 4)
post_mean <- 7.3165/0.0007
post_mean
#mle <- steps_df %>% group_by(students) %>% summarise(mle = mean(steps))
#kable(data.frame(round(mle,2), posterior = round(summary(steps_sim)[[1]][3:6])))
mle <- steps_df %>% group_by(students) %>% summarise(mle = mean(steps))
kable(data.frame(round(mle,2), posterior = round(summary(steps_sim)[[1]][3:6])))
mle <- steps_df %>% group_by(students) %>% summarise(mle = mean(steps))
kable(data.frame(round(mle,2), posterior = round(summary(steps_sim)[[1]][3:6], 2)))
View(steps_sim)
stat
View(stat)
post_mean_dist <- data.frame(steps_sim[[1]])
post_mean_dist <- data.frame(steps_sim[[1]])
post_mean_dist
post_mean_dist <- data.frame(steps_sim[[1]])
post_mean_dist$mean <- post_mean_dist$a / post_mean_dist$b
plot(post_mean_dist$mean)
post_mean_dist <- data.frame(steps_sim[[1]])
post_mean_dist$mean <- post_mean_dist$a / post_mean_dist$b
post_mean <- mean(post_mean_dist$mean)
post_mean
plot(post_mean_dist$mean)
quantile(post_mean_dist$mean, probs = c(0.025,0.975))
quantile(post_mean_dist$mean, probs = c(0.025,0.975))
ggplot(post_mean_dist, aes(x=mean)) + geom_density() +
geom_vline(color = 'red', lty = 'dashed',
xintercept=quantile(post_mean_dist$mean, probs = c(0.025,0.975)))
# plot a histogram
hist(daily_steps,
main="Histogram for Average Daily Steps",
xlab="Steps",
border="darkblue",
col="lightblue",
xlim=c(min(daily_steps), 15500),
las=1,
breaks=10)
m <- 7500
std <- 2800
my_alpha <- m^2/std^2
my_beta <- m/std^2
x <- seq(min(daily_steps), max(daily_steps), length=25)
priorx <- dgamma(x, shape=my_alpha, rate=my_beta)
plot(x, priorx, type='l',lwd=3, xlim = c(min(x), max(x)), ylim=c(0,0.00015),col = 'blue',
main = '', xlab = 'Daily Step Counts', ylab = '')
#plot the daily count steps
ggplot(steps_df, aes(y=steps, group = students)) +
geom_boxplot(aes(fill=as.factor(students))) +
labs(y = "Daily Step Counts" , fill = "Students") +
theme_bw()
plot(steps_sim)
plot(steps_sim)[[1]]
# plot the simulations
plot(steps_sim[[1]])
View(steps_sim)
# plot the simulations
plot(steps_sim[[2]])
# plot the simulations
plot(steps_sim[[3]])
# plot the simulations
plot(steps_sim)[1]
# plot the simulations
plot(steps_sim[1])
# plot the simulations
plot(steps_sim[,c(1,2)])
plot(steps_sim[,c(1,2)])
plot(steps_sim[,c(5,6)])
plot(steps_sim[,c(5,6)])
plot(steps_sim[,c(3,4)])
plot(steps_sim[,c(5,6)])
plot(steps_sim[,c(3,4)])
plot(steps_sim[,c(5,6)])
# plot the simulations
plot(steps_sim[,c(3,4,5,6)])
# plot the simulations
plot(steps_sim)
#Store the chains in a data frame
steps_chains <- data.frame(sim = 1:n, steps_sim[[1]])
#Store the chains in a data frame
steps_chains <- data.frame(sim = 1:n, steps_sim[[1]])
#Store the chains in a data frame
steps_chains <- data.frame(sim = 1:n, steps_sim[[1]])
#Store the chains in a data frame
steps_chains <- data.frame(sim = 1:4, steps_sim[[1]])
head(steps_chains)
View(steps_chains)
#Store the chains in a data frame
steps_chains <- data.frame(chains = 1:4, steps_sim[[1]])
head(steps_chains)
#Store the chains in a data frame
steps_chains <- data.frame(sim = 1:20000, steps_sim[[1]])
head(steps_chains)
# summary of quantiles
round(summary(steps_sim)[2]$quantile, 4)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(LearnBayes)
source('TeachBayes.r')
library(tidyverse)
library(rjags)
# define our prior data set that is collected from previous publications
# average daily step counts from cohort 3 graduate students
daily_steps <- c(400, 1000, 1500, 6000, 7016, 7820, 8000, 8000, 8000, 8068, 10000, 10000, 10000, 10414, 10953, 11124, 12417, 14000, 14000, 14000, 15000, 3800, 4000, 3000, 4000, 8000, 11822,8000, 7500, 9999, 10000, 12499)
# plot a histogram
hist(daily_steps,
main="Histogram for Average Daily Steps",
xlab="Steps",
border="darkblue",
col="lightblue",
xlim=c(min(daily_steps), 15500),
las=1,
breaks=10)
m <- 7500
std <- 2800
my_alpha <- m^2/std^2
my_beta <- m/std^2
x <- seq(min(daily_steps), max(daily_steps), length=25)
priorx <- dgamma(x, shape=my_alpha, rate=my_beta)
plot(x, priorx, type='l',lwd=3, xlim = c(min(x), max(x)), ylim=c(0,0.00015),col = 'blue',
main = '', xlab = 'Daily Step Counts', ylab = '')
# daily steps counts of 5G
n1 <- c(11233,16683,19389,1009,8971,9582,5195,9932,16643,7610,7611,15745,7427,7365,6209,15984,17006,11668,11770,9566,14153,8250,14386,18546,19037,11512,9269,5964,8571,8123,10445)
n2 <- c(8632,94,12626,6618,10140,3807,1518,8976,5401,6015,15265,9494,4276,3458,12667,1574,19215,3562,7118,18315,4098,7880,6832,21,10840,12038,13276,13604,9252,13,13473)
n3 <- c(14088,13741,18879,9008,7240,6705,14145,9688,11677,14158,18181,11360,5366,7247,6478,5454,7108,13981,12393,14611,14162,17909,850,658,9519,10773,12942,12354,8212,2122,11823)
n4 <- c(12516,16648,18535,8471,5276,7391,18322,9840,5612,9394,10399,6548,7753,7202,12155,20152,5172,13354,7634,8156,10069,7714,8273,13391,12087,13872,10794,5932,10264,14142,22486)
steps <- c(n1, n2, n3, n4)
students <- c(rep(1,length(n1)),
rep(2, length(n2)),
rep(3, length(n3)),
rep(4, length(n4)))
steps_df <- data.frame(students, steps)
head(steps_df,4)
#plot the daily count steps
ggplot(steps_df, aes(y=steps, group = students)) +
geom_boxplot(aes(fill=as.factor(students))) +
labs(y = "Daily Step Counts" , fill = "Students") +
theme_bw()
steps_model <- "model{
# Likelihood model for X[i]
for(i in 1:length(X)) {
X[i] ~ dpois(theta[student[i]])
}
# Prior models for theta_s
for(student in 1:n.student) {
theta[student] ~ dgamma(a, b)
}
# Hyperpriors for a,b
a ~ dnorm(7, 1^(-2))
b ~ dnorm(0.001, 0.01^(-2))
}"
steps_jags <- jags.model(textConnection(steps_model),
data = list(X = steps_df$steps, student = steps_df$students,
n.student = 4),
n.chains = 4)
# BURN IN the model
steps_sim <- update(steps_jags, n.iter=10000)
# SIMULATE the posterior
steps_sim <- coda.samples(model = steps_jags,
variable.names = c("theta", "a", "b"),
n.iter=20000)
# plot the simulations
plot(steps_sim)
# Store the chains in a data frame
steps_chains <- data.frame(steps_sim[[1]])
# Check out the head of rent_chains
head(steps_chains)
# Store the chains in a data frame
steps_chains <- data.frame(sim = 1:20000, steps_sim[[1]])
# Check out the head of rent_chains
head(steps_chains)
# Store the chains in a data frame
steps_chains <- data.frame(sim = 1:20000, steps_sim[[1]])
# Check out the head of rent_chains
head(steps_chains)
# Distribution of the posterior mean
steps_chains$mean <- steps_chains$a/steps_chains$b
mean(steps_chains$mean)
# Distribution of the posterior mean
steps_chains$mean <- steps_chains$a/steps_chains$b
mean(steps_chains$mean)
plot(post_mean_dist$mean)
# Distribution of the posterior mean
steps_chains$mean <- steps_chains$a/steps_chains$b
mean(steps_chains$mean)
plot(steps_chains$mean)
# Distribution of the posterior mean
steps_chains$mean <- steps_chains$a/steps_chains$b
mean(steps_chains$mean)
plot(steps_chains$mean)
quantile(steps_chains$mean, probs = c(0.025,0.975))
View(steps_chains)
ggplot(steps_chains, aes(x=sim, y=mean)) + geom_point()
ggplot(steps_chains, aes(x=sim, y=mean)) +
geom_point() +
labs(y = "Average Daily Step Counts" , x = "Iterations") +
theme_bw()
ggplot(steps_chains, aes(x=sim, y=mean)) +
geom_point() +
geom_line(aes(linetype=mean(steps_chains$mean))) +
labs(y = "Average Daily Step Counts" , x = "Iterations") +
theme_bw()
ggplot(steps_chains, aes(x=sim, y=mean)) +
geom_point() +
geom_hline(yintercept = mean(steps_chains$mean), color = "blue") +
labs(y = "Average Daily Step Counts" , x = "Iterations") +
theme_bw()
# Distribution of the posterior mean
steps_chains$mean <- steps_chains$a/steps_chains$b
ggplot(steps_chains, aes(x=sim, y=mean)) +
geom_point() +
geom_hline(yintercept = mean(steps_chains$mean), color = "blue", size = 2) +
labs(y = "Average Daily Step Counts" , x = "Iterations") +
theme_bw()
quantile(steps_chains$mean, probs = c(0.025,0.975))
# Distribution of the posterior mean
steps_chains$mean <- steps_chains$a/steps_chains$b
ggplot(steps_chains, aes(x=sim, y=mean)) +
geom_point() +
geom_hline(yintercept = mean(steps_chains$mean), color = "blue", size = 1.2) +
labs(y = "Average Daily Step Counts" , x = "Iterations") +
theme_bw()
quantile(steps_chains$mean, probs = c(0.025,0.975))
# Distribution of the posterior mean
steps_chains$mean <- steps_chains$a/steps_chains$b
ggplot(steps_chains, aes(x=sim, y=mean)) +
geom_point() +
geom_hline(yintercept = mean(steps_chains$mean), color = "blue", size = 1.2) +
annotate("text", x = 18000, y = 11000, label = "Posterior Mean = 10164.96")
labs(y = "Average Daily Step Counts" , x = "Iterations") +
theme_bw()
quantile(steps_chains$mean, probs = c(0.025,0.975))
ggplot(steps_chains, aes(x=sim, y=mean)) +
geom_point() +
geom_hline(yintercept = mean(steps_chains$mean), color = "blue", size = 1.2) +
annotate("text", x = 15000, y = 11000, label = "Posterior Mean = 10164.96")
ggplot(steps_chains, aes(x=sim, y=mean)) +
geom_point() +
geom_hline(yintercept = mean(steps_chains$mean), color = "blue", size = 1.2) +
annotate("text", x = 15000, y = 11000, label = "Posterior Mean = 10164.96", color = "white")
ggplot(steps_chains, aes(x=sim, y=mean)) +
geom_point() +
geom_hline(yintercept = mean(steps_chains$mean), color = "blue", size = 1.2) +
annotate("text", x = 17000, y = 11000, label = "Posterior Mean = 10164.96", color = "white")
ggplot(steps_chains, aes(x=sim, y=mean)) +
geom_point() +
geom_hline(yintercept = mean(steps_chains$mean), color = "blue", size = 1.2) +
annotate("text", x = 17000, y = 11000, label = "Posterior Mean = 10164.96", color = "white") +
labs(y = "Average Daily Step Counts" , x = "Iterations") +
theme_bw()
ggplot(steps_chains, aes(x=sim, y=mean)) +
geom_point() +
geom_hline(yintercept = mean(steps_chains$mean), color = "blue", size = 1.2) +
annotate("text", x = 18000, y = 11000, label = "Posterior Mean = 10164.96", color = "white") +
labs(y = "Average Daily Step Counts" , x = "Iterations") +
theme_bw()
# Distribution of the posterior mean
steps_chains$mean <- steps_chains$a/steps_chains$b
ggplot(steps_chains, aes(x=sim, y=mean)) +
geom_point() +
geom_hline(yintercept = mean(steps_chains$mean), color = "blue", size = 1.2) +
annotate("text", x = 15000, y = 11000, label = "Posterior Mean = 10164.96", color = "white") +
labs(y = "Average Daily Step Counts" , x = "Iterations") +
theme_bw()
quantile(steps_chains$mean, probs = c(0.025,0.975))
ggplot(steps_chains, aes(x=sim, y=mean)) +
geom_point() +
geom_hline(yintercept = mean(steps_chains$mean), color = "blue", size = 1.2) +
annotate("text", x = 15000, y = 11000, label = "Posterior Mean = 10164.96", color = "white") +
labs(y = "Average Daily Step Counts" , x = "Iterations") +
theme_bw()
ggplot(steps_chains, aes(x=sim, y=mean)) +
geom_point() +
geom_hline(yintercept = mean(steps_chains$mean), color = "blue", size = 1.2) +
annotate("text", x = 17000, y = 11000, label = "Posterior Mean = 10164.96", color = "white") +
labs(y = "Average Daily Step Counts" , x = "Iterations") +
theme_bw()
ggplot(steps_chains, aes(x=sim, y=mean)) +
geom_point() +
geom_hline(yintercept = mean(steps_chains$mean), color = "blue", size = 1.2) +
annotate("text", x = 17000, y = 11000, label = "Posterior Mean = 10164.96", color = "white") +
labs(y = "Average Daily Step Counts" , x = "Iterations") +
theme_bw()
quantile(steps_chains$mean, probs = c(0.025,0.975))
quantile(steps_chains$mean, probs = c(0.025,0.975))
ggplot(steps_chains, aes(x=mean)) + geom_density() +
geom_vline(color = 'red', lty = 'dashed',
xintercept=quantile(steps_chains$mean, probs = c(0.025,0.975)))
quantile(steps_chains$mean, probs = c(0.025,0.975))
ggplot(steps_chains, aes(x=mean)) + geom_density() +
geom_vline(color = 'red', lty = 'dashed',
xintercept=quantile(steps_chains$mean, probs = c(0.025,0.975))) +
labs(x = "Average Daily Step Counts") +
theme_bw()
quantile(steps_chains$mean, probs = c(0.025,0.975))
ggplot(steps_chains, aes(x=mean)) + geom_density() +
geom_vline(color = 'red', lty = 'dashed', size = 1.2,
xintercept=quantile(steps_chains$mean, probs = c(0.025,0.975))) +
labs(x = "Average Daily Step Counts") +
theme_bw()
quantile(steps_chains$mean, probs = c(0.025,0.975))
ggplot(steps_chains, aes(x=mean)) + geom_density(size=1.2) +
geom_vline(color = 'red', lty = 'dashed', size = 1.2,
xintercept=quantile(steps_chains$mean, probs = c(0.025,0.975))) +
labs(x = "Average Daily Step Counts") +
theme_bw()
quantile(steps_chains$mean, probs = c(0.025,0.975))
ggplot(steps_chains, aes(x=mean)) + geom_density(size=2) +
geom_vline(color = 'red', lty = 'dashed', size = 1,
xintercept=quantile(steps_chains$mean, probs = c(0.025,0.975))) +
labs(x = "Average Daily Step Counts") +
theme_bw()
quantile(steps_chains$mean, probs = c(0.025,0.975))
ggplot(steps_chains, aes(x=mean)) + geom_density(size=1.4) +
geom_vline(color = 'red', lty = 'dashed', size = 1,
xintercept=quantile(steps_chains$mean, probs = c(0.025,0.975))) +
labs(x = "Average Daily Step Counts") +
theme_bw()
ggplot(steps_chains, aes(x=mean)) + geom_density(size=1.4) +
geom_vline(color = 'red', lty = 'dashed', size = 1,
xintercept=quantile(steps_chains$mean, probs = c(0.025,0.975))) +
labs(x = "Average Daily Step Counts") +
theme_bw()
ggplot(steps_chains, aes(x=mean)) + geom_density(size=1.4, color="darkblue", fill="lightblue") +
geom_vline(color = 'red', lty = 'dashed', size = 1,
xintercept=quantile(steps_chains$mean, probs = c(0.025,0.975))) +
labs(x = "Average Daily Step Counts") +
theme_bw()
ggplot(steps_chains, aes(x=mean)) + geom_density(size=1.4, color="darkblue", fill="lightblue") +
geom_vline(color = 'red', lty = 'dashed', size = 1,
xintercept=quantile(steps_chains$mean, probs = c(0.025,0.975))) +
labs(x = "Average Daily Step Counts") +
theme_bw()
ggplot(steps_chains, aes(x=mean)) + geom_density(size=1, color="darkblue") +
geom_vline(color = 'red', lty = 'dashed', size = 1,
xintercept=quantile(steps_chains$mean, probs = c(0.025,0.975))) +
labs(x = "Average Daily Step Counts") +
theme_bw()
quantile(steps_chains$mean, probs = c(0.025,0.975))
ggplot(steps_chains, aes(x=mean)) + geom_density(size=1, color="darkblue") +
geom_vline(color = 'red', lty = 'dashed', size = 1,
xintercept=quantile(steps_chains$mean, probs = c(0.025,0.975))) +
labs(x = "Average Daily Step Counts") +
theme_bw()
ggplot(steps_chains, aes(x=mean)) + geom_density(size=1, color="darkblue") +
geom_vline(color = 'red', lty = 'dashed', size = 1,
xintercept=quantile(steps_chains$mean, probs = c(0.025,0.975))) +
labs(x = "Average Daily Step Counts") +
theme_bw()
quantile(steps_chains$mean, probs = c(0.025,0.975))
ggplot(steps_chains, aes(x=mean)) + geom_density(size=1, color="darkblue") +
geom_vline(color = 'red', lty = 'dashed', size = 1,
xintercept=quantile(steps_chains$mean, probs = c(0.025,0.975))) +
labs(x = "Average Daily Step Counts") +
theme_bw()
